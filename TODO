
gestion des fichiers 2014/04 : P2
  Les deux fonctions "save partition table to file" et "read partition table
  from file" ne peuvent pas fonctionner car ma colle ne contient aucun code
  pour gérer les fichiers.


bss 2014/01 : P3
  Le BSS ne semble pas pouvoir être défini comme en ELF par un segment .bss
  cela ne marcherait pas d'après la documentation GNU-EFI, vérifier ce
  comportement, en particulier, vérifier que le fichier .EFI contient bien
  la taille du BSS en position 0xA4 (0xA0 = data_length et 0x9C = code_length).
  Cela économiserait ~90ko sur l'exécutable construit (actuellement
  930304 octets). En attendant on met le BSS dans les datas et cela construit
  un fichier avec plein de 0 dans cette zone.
problème 2014/01 :
  Le objcopy produit un en-tête PE+ qui contient bien les tailles des
  segments .text et .data mais met 0 pour le segment .bss ?
  C'est sans doute un bug dans objcopy ou la librarie GNU BFD Library sur
  laquelle il s'appuie.


--- résolu


debug en boucle infinie : P1
  Depuis que le code de debug écrit sur la console via des write(2,...) le
  debug ne marche plus car le module io.c qui contient cette fonction commence
  par un appel à malloc() qui à son tour appelle le code de debug.
solution :
  Des fonctions UEFI_console_getchar() et UEFI_console_putchar() sont ajoutées
  au module io.c pour respectivement lire et écrire un caractère Unicode
  depuis et vers la console UEFI. Du même coup le module n'appelle plus la
  fonction IInput de GNU EFI et un nouveau module "debug_linux.c" est
  nécessaire pour fournir la même fonctionnalité en compilation Linux.


UEFI_SystemTable et ST : P3
  Dans la librairie GNU EFI il existe une globale "ST" qui contient l'adresse
  de la table système UEFI, ceci est complètement redondant avec la variable
  "UEFI_SystemTable" déclarée et renseignée au début de l'exécution (alors que
  "ST" est renseignée par l'appel à InitializeLib() fait dans efi_main.cc).
solution :
  En fait il est possible de se passer entièrement de "UEFI_SystemTable" et
  d'employer "ST" partout dans le code.
  Attention : Le symbole "RT" de la librairie GNU EFI n'est quant-à lui défini
  que lors de l'appel à InitializeLib() et donc le debug ne *doit* pas s'en
  servir et employer "ST-> RuntimeServices" à la place.


GOT 2014/02 : P1
  La _GLOBAL_OFFSET_TABLE et le PLT ne semblent pas contenir les bonnes
  valeurs plus précément la GOT contient les VMA du fichier gdisk.efi, pas les
  bonnes adresses et cela n'est pas compensé par le loader. Il semble qu'il
  ne reste que des trucs liés au multi-thread dans la GOT, mais sait-on
  jamais ?
problème 2014/02 :
  En fait le PLT contient des fonctions liées au multi-thread et le programme
  crashe déjà longtemps avant d'y faire appel ou pas.
  La GOT contient en particulier une entrée qui devrait contenir l'adresse de
  std::basic_string<>::_Rep::_S_empty_rep_storage et actuellement c'est 0 qui
  s'y trouve donc *boum*.
solution 2014/02 :
  Dans relocateXX.c on traite également les entrées de type
  6 = R_X86_64_GLOB_DAT
  qui possèdent une adresse(1) et un numéro de symbole dont l'adresse(2) est
  copiée à l'adresse(1).
problème 2014/03 :
  Cela crashe le programme bien plus tôt qu'avant.
  Il semble que cela puisse avoir un lien avec __tls_get_addr qui reste plus
  ou moins indéfini dans l'exécutable final (glue.c définit la fonction
  __fortify_fail() qui aborte le programme mais qui n'est jamais appelée en
  optimisation -O2 ou -Os).
solution 2014/03 :
  En fait le PLT / GOT est employé pour les fonctions qui restent indéfinies à
  l'issue du link (qui est fait avec --no-undefined et qui devrait hurler dans
  ce cas, mais je ne sais pas trop pourquoi. Toujours est-il que le code de
  GPT fdisk appelle pthread_once() qui n'existe pas et se plante. La version
  avec des efforts pour supprimer les threads ne le faisait pas mais le
  changement dans libmy pour en faire une version unique (avec des données et
  du code thread local) avait changé cela et le programme plantait dès le
  début de son exécution dans les fonctions d'init :

	__init_array_start = 0000000000041288

	première entrée : 456a3
	  _GLOBAL__sub_I_support.cc
	    appelle _Z41__static_initialization_and_destruction_0ii  45658 (juste avant)

	  _Z41__static_initialization_and_destruction_0ii
	    appelle _ZNSt8ios_base4InitC1Ev  6227e
	    appelle __cxa_atexit  42f47

	  _ZNSt8ios_base4InitC1Ev  std::ios_base::Init::Init()
	    dprintf
	    appelle  _ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii  621d6
	    appelle  _ZN9__gnu_cxx18stdio_sync_filebufIcSt11char_traitsIcEEC1EP8_IO_FILE  b015c

	  _ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii  __gnu_cxx::__exchange_and_add_dispatch(int*, int)
	    appelle  _ZL18__gthread_active_pv

	  _ZL18__gthread_active_pv  __gthread_active_p  a9ba8

	  _ZN9__gnu_cxx18stdio_sync_filebufIcSt11char_traitsIcEEC1EP8_IO_FILE  __gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::stdio_sync_filebuf(_IO_FILE*)
	    appelle  _ZNSt15basic_streambufIcSt11char_traitsIcEEC1Ev
	    appelle  _ZNSt11char_traitsIcE3eofEv

	  _ZNSt15basic_streambufIcSt11char_traitsIcEEC1Ev  std::basic_streambuf<char, std::char_traits<char> >::basic_streambuf()
	    appelle  _ZNSt6localeC1Ev

	  _ZNSt6localeC1Ev  std::locale::locale()
	    appelle  _ZNSt6locale13_S_initializeEv

	  _ZNSt6locale13_S_initializeEv  std::locale::_S_initialize()
	    appelle  _ZL18__gthread_active_pv
	    appelle  ??  __gthread_once
	    et n'appelle pas  _ZNSt6locale18_S_initialize_onceEv

	  _ZL18__gthread_active_pv   __gthread_active_p()
	    SANS DOUTE PAS DE PROBLEME

	  _ZL14__gthread_oncePiPFvvE   __gthread_once
	    appelle pthread_once@plt

	  pthread_once
	    OUAH - en créant une fonction qui fait le job, le programme a été
	    jusqu'à exit() pour sa première fois


relocations 2014/01 : P1
  Les information de relocations sont perdues en construisant gdisk.so c'est
  assez grave car il y a des instructions référençant les VMA telles
  qu'elles sont dans le fichier gdisk.so qui ne sont pas les bonnes au moment
  où le chargeur EFI passe la main au programme (en particulier les adresses
  du tableau init_array[] ou celles de la _GLOBAL_OFFSET_TABLE_ sont toutes
  inutilisables telles quelles.
  Un link comme celui fait par les applications gnu-efi conserve ces
  informations mais 1) elles semblent toutes converties en R_X86_64_NONE par
  ld et 2) le code de libstdc++ en particulier n'est pas ajouté à gdisk.so
  peut-être des options de ld permettraient d'améliorer cela...
  2014/02 En fait il sera essentiel de traiter cela correctement car le
  programme ne marche pas bien sans (il crashe pendant l'initialisation des
  locales dans le code de la librairie C++).
solution 2014/03 :
  Le script de link elf-x64_86.lds combiné aux options de ld :
  -shared : maintient les informations de relocation en fait on passe l'option
  -Bshareable au linker (car celle-ci peut aussi être passée à g++ dans le cas
   d'un link C++
  -Bstatic : lie avec les librairies .a et inclut leur code, l'option avec -B
   plutôt que -static permet de la passer à g++ pour le link C++
  -Bsymbolic : nécessaire pour le symbole ImageBase (symbole global) sinon le
   linker se plaint
  Note : oui on met les deux options "static" et "dynamic", la documentation
  du linker ld explique que cela sert à inclure le code des librairies
  (-static) mais quand même construire un ELF dynamique (ie. avec informations
  de relocation).
  Le code dans relocate_x86_64.c traite les entrées de relocation de type
  R_X86_64_RELATIVE ce qui fait une bonne partie du boulot (voir GOT pour
  le reste à faire).


optimisation 2014/02 : P2
  Le programme compile avec -O0 pas pas avec -O2
  En -O2, plein de fonctions sont "inline" dans les headers et cassent
  complètement la compilation.
solution 2014/03 :
  Emploi de -fno-inline dans le Makefile dans le cas d'optimisation, cela fait
  l'affaire au moins en -O2 et en -Os (c'est cette dernière option qui est
  préférée dans le Makefile).


fini_array 2014/01 : P3
  Le tableau fini_array[] n'est pas exploité.
  Les appels à atexit() et autres ne sont pas exploités.
  La mémoire résiduelle n'est même pas libérée.
  Cela n'est pas trop grave pour l'exécution de notre code, mais peut laisser
  des bouts de mémoire encombrés et qui nécessitent un reboot pour que UEFI
  fasse le ménage.
solution 2014/03 :
  Dans initfini.c les fonctions trouvées dans ce tableau sont enregistrées
  via __internal_atexit() pour être appelées en fin d'exécution. Cela dit
  UEFI GPT fdisk n'en possède aucune :-)
  Dans ce même module tous les appels à atexit() ou __cxa_atexit() sont
  soigneusement enregistrés et exécutés avant la fin du programme par un
  appel à la fonction _call_fini().


bulles dans le programme 2014/01 : P2
  Le script .lds crée des segments intermédiaires qui ne restent pas dans
  le fichier final : il y a plein de "trous" dans les VMA, ce serait bien
  de compacter un peu, mais il semble que le code ne fonctionne plus du tout
  après.
solution 2014/03 :
  Maintenant que les entrées de relocation sont gérées convenablement, il
  est possible de placer les segments à n'importe quelle VMA, un ajustement
  du script de link elf-x86_64.lds permet de supprimer ces bulles de VMA.

